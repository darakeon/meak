@model Presentation.Models.SeasonEpisodeModel
@using Presentation.Helpers
@using Presentation.Models.General
@using Structure.Enums;
@using Structure.Helpers

@{
	ViewBag.Title = String.Format("MEAK {0}{1} – {2}", Model.Story.Season, Model.Story, Model.Story.Title);
	Layout = "~/Views/Shared/_Layout.cshtml";
	var talkCounter = 0;
	var tellerCounter = 0;

	var topSelector =
		new TopSelectorModel
		{
			Total = Model.Story.SceneList.Count,
			Current = Convert.ToInt32(Model.ReadingScene[0]) - 97
		};

	var github = "https://raw.githubusercontent.com/" + Config.Repo;
	var season = Model.Story.Season.ID;
	var episode = Model.Story.ID;
	var audioPath = github + "/master/_" + season + "/" + episode + "/";
}

@Html.Partial("Partial/PrintHeaderAndFooter", Model.Story)

<p class="title">
	@Model.Story.Title

	@if (Model.Story.HasSummary())
	{
		var route = RouteStories.With(season);

		<a href="@(route)#@episode" class="sub screen-action">
			ler resumo
		</a>
	}
</p>

@Html.Partial("Partial/ChangeScene", topSelector)

@{
	var lastScene = Model.Story.SceneList.Count - 1;
}

<div class="scenes">
	@for (var s = 0; s <= lastScene; s++)
	{
		var scene = Model.Story.SceneList[s];
		var trigger = false;

		<div class="scene @if(scene.ID == Model.ReadingScene) { @("reading") }" id="Scene@(s)">
			@foreach (var paragraph in scene.ParagraphTypeList)
			{
				var paragraphId = s + "_" + tellerCounter + "_" + talkCounter;

				<div class="paragraph @paragraph.ToString().ToLower() @(trigger ? "trigger-hidden" : "")">
					@switch (paragraph)
					{
						case ParagraphType.Talk:

							@("– ")

							for (var p = 0; p < scene.TalkList[talkCounter].Pieces.Count; p++)
							{
								var piece = scene.TalkList[talkCounter].Pieces[p];
								var pieceId = paragraphId + "_" + p;

								var title = piece.Style == TalkStyle.Default 
									? "" 
									: Dic.Talk[piece.Style];

								<span
									title="@title"
									class="talk_@(piece.Style)">
									@piece.Text
								</span>

								if (piece.Audio != null)
								{
									<audio id="@pieceId">
										<source src="@audioPath/@piece.Audio" type="audio/mpeg">
									</audio>
									<span 
										class="darkback play"
										onclick="$('#@pieceId')[0].play()"
									>&#9658;</span>
								}
							}

							@(" (" + scene.TalkList[talkCounter].Character + ")")

							talkCounter++;

							break;

						case ParagraphType.Teller:

							foreach (var piece in scene.TellerList[tellerCounter].Pieces)
							{
								if (piece.Style == TellerStyle.Trigger)
								{
									trigger = !trigger;
								}
								else
								{
									<div class="teller_@(piece.Style)">@piece.Text</div>
								}

								if (piece.Style == TellerStyle.Trigger)
								{
									var symbol = trigger ? "+" : "–";

									<div class="teller_@(piece.Style) trigger-toggle" data-type="@symbol" data-content="@piece.Text">
										conteúdo oculto (@symbol)
									</div>
								}
							}

							tellerCounter++;

							break;
					}
				</div>
			}

			@if (s == lastScene && Model.Story.LastScene != scene.ID)
			{
				<div class="continue">Continua...</div>
			}
		</div>

		talkCounter = 0;
		tellerCounter = 0;
	}
</div>

@Html.Partial("Partial/PrintSummary", Model.Story)

@Html.Partial("Partial/ChangeScene", topSelector)

@Html.Partial("Partial/Sign")
